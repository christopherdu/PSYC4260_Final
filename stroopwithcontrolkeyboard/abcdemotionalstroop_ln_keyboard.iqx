<usermanual>
___________________________________________________________________________________________________________________	

									ABCD Emotional Stroop (keyboard version2)
								-'good' key on the right, 'bad' key on the left-
___________________________________________________________________________________________________________________

Script Author: Katja Borchert, Ph.D. (katjab@millisecond.com) for Millisecond Software, LLC
Date: 04-26-2017
last updated:  05-18-2022 by K. Borchert (katjab@millisecond.com) for Millisecond Software, LLC

Script Copyright © 05-18-2022 Millisecond Software

This script has been made available to the Millisecond Software Library by the ABCD Research Consortium.
The script was originally designed for ABCD to be run on ipads and 
was adapted by Millisecond to run with keyboards for the Millisecond Library.

In this script the 'good' key is on the right and the 'bad' key is on the left.

___________________________________________________________________________________________________________________
BACKGROUND INFO 	
___________________________________________________________________________________________________________________	

This Inquisit script implements an Emotional Stroop Script designed for a touchcreen.
The Inquisit script is based on an existing e-prime script by: Dr. Marie Banich

___________________________________________________________________________________________________________________
TASK DESCRIPTION	
___________________________________________________________________________________________________________________	

Participants categorize words as "good" feeling (happy, joyful) or a "bad" feeling (angry, upset).
The words are presented on the top or bottom of images. The image either show a word congruent face emotion
(e.g. "happy" face paired with word "joyful") or an incongruent one (e.g. "happy face" paired with word "angry").
Images depict happy and angry emotions of teens.
Participants work through 2 test blocks: one block presents 25% incongruent pairings and 75% congruent pairings,
and the other block presents an equal number of congruent and incongruent pairings. Block order is determined randomly.

In this script, the response button for 'bad' is located on the left side and the response button for 'good' is located
on the right side of the screen.

___________________________________________________________________________________________________________________	
DURATION 
___________________________________________________________________________________________________________________	
the default set-up of the script takes appr. 10 minutes to complete

___________________________________________________________________________________________________________________	
DATA FILE INFORMATION 
___________________________________________________________________________________________________________________ 
The default data stored in the data files are:

(1) Raw data file: 'abcdemotionalstroop_ln_raw*.iqdat' (a separate file for each participant)*

build:							The specific Inquisit version used (the 'build') that was run
computer.platform:				the platform the script was run on (win/mac/ios/android)
date, time: 					date and time script was run 
subject, group: 				with the current subject/groupnumber
session:						with the current session id

blockcode, blocknum:			the name and number of the current block (built-in Inquisit variable)
trialcode, trialnum: 			the name and number of the currently recorded trial (built-in Inquisit variable)
									Note: trialnum is a built-in Inquisit variable; it counts all trials run; even those
									that do not store data to the data file such as feedback trials. Thus, trialnum 
									may not reflect the number of main trials run per block.
								
keyAssignment:					"leftnegative" => left response key is negative; right response key is positive								
									
wordposition:					1 = word appears on top; 2 = word appears on bottom
word_y:							stores the vertical coordinate of the current word (in % of canvas height)
congruence:						1 = congruent; 2 = incongruent (emotion word and emotion image depict opposite emotions)
selectStim:						itemnumber of selected stimulus

stimulusitem.1-:				the presented stimuli in order of trial presentation
stimulusitem.3					1) an empty stimulus (clearscreen)
								2) presented image
								3) presented word
										
correctButton:					stores the correct response button for the current trial

response:						the participant's response (scancode of response key)
								16 = Q = left ("bad")
								25 = P = right ("good")

correct:						accuracy of response: 1 = correct response; 0 = otherwise
latency: 						the response latency (in ms); measured from: onset of image/word pair
list.accuracy.mean:				proportion correct of current block		


(2) Summary data file: 'abcdemotionalstroop_ln_summary*.iqdat' (a separate file for each participant)*

inquisit.version:				Inquisit version run
computer.platform:				the platform the script was run on (win/mac/ios/android)
startdate:						date script was run
starttime:						time script was started
subjectid:						assigned subject id number
groupid:						assigned group id number
sessionid:						assigned session id number
elapsedtime:					time it took to run script (in ms); measured from onset to offset of script
completed:						0 = script was not completed (prematurely aborted); 
								1 = script was completed (all conditions run)
								
								
keyAssignment:					"leftnegative" => left response key is negative; right response key is positive
								
ACC_practice1:					proportion correct in final practice1 run
practice1Runs:					number of practice1 runs needed
ACC_practice2:					proportion correct in final practice2 run
practice2Runs:					number of practice2 runs needed

ACC_all:						proportion correct overall (across all test trials)

ACC_moreCongruent:				proportion correct in "more congruent pairings" block
ACC_moreCongruentCongruent:		proportion correct on congruent trials in "more congruent pairings" block
ACC_moreCongruentIncongruent:	proportion correct on incongruent trials in "more congruent pairings" block

ACC_equal:						proportion correct in "equal numbers of congruentincongruent pairings" block
ACC_equalCongruent:				proportion correct in "equal numbers of congruentincongruent pairings" block
ACC_equalIncongruent:			proportion correct in "equal numbers of congruentincongruent pairings" block

ACC_congruent:					proportion correct in "congruent" pairings trials (across test blocks)
ACC_incongruent:				proportion correct in "incongruent" pairings trials (across test blocks)

meanRT_all: 					mean correct latency (in ms) overall

meanRT_moreCongruent:			mean correct latency (in ms) in "more congruent pairings" block
meanRT_moreCongruentCongruent:	mean correct latency (in ms) on congruent trials in "more congruent pairings" block
meanRT_moreCongruentIncongruent:mean correct latency (in ms) on incongruent trials in "more congruent pairings" block

meanRT_equal:					mean correct latency (in ms) in "equal numbers of congruentincongruent pairings" block
meanRT_equalCongruent:			mean correct latency (in ms) in "equal numbers of congruentincongruent pairings" block
meanRT_equalIncongruent:		mean correct latency (in ms) in "equal numbers of congruentincongruent pairings" block

meanRT_congruent:				mean correct latency (in ms) in "congruent" pairings trials (across test blocks)
meanRT_incongruent:				mean correct latency (in ms) in "incongruent" pairings trials (across test blocks)

* separate data files: to change to one data file for all participants (on Inquisit Lab only), go to section
"DATA" and follow further instructions

___________________________________________________________________________________________________________________	
EXPERIMENTAL SET-UP 
___________________________________________________________________________________________________________________	

1. Practice Block: 8 trials selected from 6 possible combinations
=> feedback provided
=> practice block is repeated if proportion correct of the last 8 trials is < 75%

2. Practice Block: 4 trials (good-top-congruent, good-bottom-incongruent, bad-bottom-congruent, bad-top-incongruent)
=> feedback provided
=> practice block is repeated if proportion correct is < 100%


3. 2 Test Blocks: 

(1) More Congruent Pairings: 48 trials - order of trials randomly determined
-36 congruent word valence - pic valence pairings (fixed pairs)
-12 incongruent word valence - pic valence pairings (fixed pairs)
	- half the words appear on top of image, the other on the bottom
 
(2) Equal number of congruent and incongruent pairings
-24 congruent word valence - pic valence pairings (fixed pairs)
-24 incongruent word valence - pic valence pairings (fixed pairs)
	- half the words appear on top of image, the other on the bottom
	
Trial Sequence:
Word/image (for: 2000ms) -> ITI: 1500ms (during practice: ITI provides feedback for 2000ms)

___________________________________________________________________________________________________________________	
STIMULI
___________________________________________________________________________________________________________________	
provided by ABCD research consortium.
pictures taken from: The NIMH Child Emotional Faces Picture Set (NIMH-ChEFS)
http://devepi.duhs.duke.edu/NIMH_Pictures.html

*position of words on images as well as size of words and images can be edited under section Editable Parameters 
*words are presented in cyan with a black shadow

___________________________________________________________________________________________________________________	
INSTRUCTIONS 
___________________________________________________________________________________________________________________	
provided by ABCD research consortium - can be edited under section Editable Instructions

___________________________________________________________________________________________________________________	
EDITABLE CODE 
___________________________________________________________________________________________________________________	
check below for (relatively) easily editable parameters, stimuli, instructions etc. 
Keep in mind that you can use this script as a template and therefore always "mess" with the entire code 
to further customize your experiment.

The parameters you can change are:

Duration Parameters:
/wordPresentationTime_practice:					word duration (in ms) during practice trials (default: 2500ms)
/feedbackDuration:								feedback duration (in ms) during practice
/wordPresentationTime_test:						word duration (in ms) during test trials (default: 2500ms)
/ITI:											intertrial interval (in ms) between test trials (default: 1500ms)
/readyDuration:									duration (in ms) of ready trial (default: 3000ms)

Interface:
/wordSize:										sizing of words proportional to canvas height (default: 5%)
/picsize:										sizing of images proportional to canvas height (default: 45%)
/top_y:											vertical coordinate of top word in relation to canvas (default: 40%)
/bottom_y:										vertical coordinate of bottom word in relation to canvas (default: 60%)
													Note: top of canvas = 0%; bottom of canvas = 100%

/leftresponsekey:								the left response key (default: "Q")
/rightresponsekey:								the right response key (default: "P")

</usermanual>



**************************************************************************************************************
**************************************************************************************************************
	EDITABLE PARAMETERS: change editable parameters here
**************************************************************************************************************
**************************************************************************************************************
Word presented for max. 2000ms (response window same) -> Feedback (correct, incorrect, no response) for 2000ms

<parameters>
/wordPresentationTime_practice = 2000
/feedbackDuration = 2000
/wordPresentationTime_test = 2000
/ITI = 1500
/readyDuration = 3000

/wordSize = 7%
/picsize = 45%
/top_y = 40%
/bottom_y = 60%

/leftresponsekey = "Q"
/rightresponsekey = "P"
</parameters>

**************************************************************************************************************
**************************************************************************************************************
	EDITABLE INSTRUCTIONS: change instructions here
**************************************************************************************************************
**************************************************************************************************************
<instruct>
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
</instruct>


<item instructions>
/1 = "Word Identification

Press SPACEBAR to begin."
/2 = "In this game, you will see some words describing feelings.  They will appear one at a time. 
 
You are to press one <%expressions.buttoninstruct1%> if that feeling usually makes people feel GOOD. You are to press another <%expressions.buttoninstruct2%> if that feeling usually makes people feel BAD.

The possible responses are:

~n~n~n~n~n~n"
/3 = "Let's practice the response <%expressions.buttoninstruct2%>s.

Remember:
For GOOD press '<%values.goodkey%>'
For BAD press '<%values.badkey%>'

Press <SPACEBAR> when you are ready to begin the practice."
/4 = "Now we are going to make the task a bit harder. You still have to decide if the feeling described by the word is usually linked to feeling GOOD or whether it is usually linked to feeling BAD. BUT you have to ignore the face on which the word is printed. 
"

/5 = "You are finished with the practice trials. Decide whether the feeling described by the word is usually linked to feeling GOOD or whether it is usually linked to feeling BAD.  Ignore the face in the background.


Press <SPACEBAR> when you are ready to begin."
/6 = "You're halfway done!  

Press <SPACEBAR> to continue the task."
/7 = "Thank you for playing this game!"
</item>


<item continueButtons>
/1 = "Press <SPACEBAR> to Start"
/2 = "Press <SPACEBAR> to Continue"
/3 = "Press <SPACEBAR> to Start"
/4 = "Press <SPACEBAR> to Start"
/5 = "Press <SPACEBAR> to Start"
/6 = "Press <SPACEBAR> to Start"
/7 = "Stop"
</item>

<text getReadyMessage>
/ items = ("Get Ready!

<%expressions.buttoninstruct3%>")
/ position = (50%, 50%)
/ fontstyle = ("Arial", 3.5%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (80%, 80%)
</text>

<text goodKeyReminder>
/ items = ("GOOD = <%values.goodkey%>")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ size = (30%, 5%)
/ vjustify = center
/ txcolor = gray
/ position = (85%, 90%)
/ erase = false
</text>

<text badKeyReminder>
/ items = ("BAD = <%values.badkey%>")
/ fontstyle = ("Arial", 4%, false, false, false, false, 5, 1)
/ size = (30%, 5%)
/ vjustify = center
/ txcolor = gray
/ position = (15%, 90%)
/ erase = false
</text>

<text positiveButton_instruct>
/ items = ("GOOD = Press '<%values.goodkey%>' <%expressions.buttoninstruct2%>")
/ position = (75%, 60%)
/ fontstyle = ("Arial", 5%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (45%, 10%)
/ txcolor = orange
</text>

<text negativeButton_instruct>
/ items = ("BAD = Press '<%values.badkey%>' <%expressions.buttoninstruct2%>")
/ position = (25%, 60%)
/ fontstyle = ("Arial", 5%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (45%, 10%)
/ txcolor = orange
</text>

<text positiveEmotionExamples>
/ items = ("happy~nglad~njoyful")
/ position = (75%, 70%)
/ fontstyle = ("Arial", 4%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (40%, 40%)
</text>

<text negativeEmotionExamples>
/ items = ("angry~nmad~nupset")
/ position = (25%, 70%)
/ fontstyle = ("Arial", 4%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (40%, 40%)
</text>


*******************************
General Helper Instructions
******************************

<text repeatPractice>
/ items = ("Let's try that again.")
/ fontstyle = ("Arial", 4.00%, false, false, false, false, 5, 1)
/ size = (80%, 40%)
/ position = (50%, 30%)
</text>

<text exit>
/ items = ("<press spacebar to exit>")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/ position = (50%, 90%)
/ size = (80%, 5%)
/ vjustify = center
</text>

<expressions>
/buttoninstruct1 = if (computer.touch && !computer.haskeyboard) {"response button";} 
else {
"key on your keyboard";}
/buttoninstruct2 = if (computer.touch && !computer.haskeyboard) {"button";} 
else {
"key";}
/buttoninstruct3 = if (computer.touch && !computer.haskeyboard) {"put your index fingers over the left and right response buttons";} 
else {
"Put your index fingers on the left '<%parameters.leftresponsekey%>' and the right '<%parameters.rightresponsekey%>'";}
</expressions>

**************************************************************************************************************
**************************************************************************************************************
	EDITABLE STIMULI
**************************************************************************************************************
**************************************************************************************************************

********************************************
practice 1
********************************************

<list practice1_itemnumbers>
/ items = (1, 2, 3, 4, 5, 6)
/ replace = false
/ resetinterval = 0
</list>

<item words_practice1>
/1 = "glad"
/2 = "happy"
/3 = "joyful"
/4 = "angry"
/5 = "mad"
/6 = "upset"
</item>

<item correctButton_practice1>
/1 = "positiveButton"
/2 = "positiveButton"
/3 = "positiveButton"
/4 = "negativeButton"
/5 = "negativeButton"
/6 = "negativeButton"
</item>

<item feedback>
/1 = "Correct!"
/2 = "Incorrect"
/3 = "Too slow"
</item>

********************************************
practice 2
********************************************

<list practice2_itemnumbers>
/ items = (1, 2, 3, 4)
/ replace = false
/ resetinterval = 0
</list>

<item pics_practice2>
/1 = "M18HS_8848.jpg"
/2 = "M20AS_9297.jpg"
/3 = "M18HS_8848.jpg"
/4 = "M20AS_9297.jpg"
</item>

<item words_practice2>
/1 = "joyful"
/2 = "happy"
/3 = "angry"
/4 = "mad"
</item>

<list wordPositions_practice2>
/ items = (1, 2, 1, 2)
/ select = values.selectStim
</list>

<list congruency_practice2>
/items = (1, 2, 2, 1)
/ select = values.selectStim
</list>

<item correctButton_practice2>
/1 = "positiveButton"
/2 = "positiveButton"
/3 = "negativeButton"
/4 = "negativeButton"
</item>

****************************
testMC

(MC = more congruent)
****************************

<list testMC_itemnumbers>
/ items = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)
/ replace = false
/ resetinterval = 0
</list>

<item pics_testMC>
/1="F1HS_3423.jpg"
/2="F2HS_3448.jpg"
/3="F3HS_3540.jpg"
/4="F4HS_3664.jpg"
/5="F5HS_3759.jpg"
/6="F6HS_3875.jpg"
/7="F7HS_3986.jpg"
/8="F8HS_4086.jpg"
/9="F9HS_4187.jpg"
/10="F10HS_4372.jpg"
/11="F11HS_4520.jpg"
/12="F12HS_5000.jpg"
/13="M1HS_4301.jpg"
/14="M2HS_4493.jpg"
/15="M3HS_4695.jpg"
/16="M4HS_4862.jpg"
/17="M5HS_5134.jpg"
/18="M6HS_5354.jpg"
/19="M7HS_5497.jpg"
/20="M8HS_5817.jpg"
/21="M9HS_6054.jpg"
/22="M10HS_6767.jpg"
/23="M11HS_6885.jpg"
/24="M12HS_7022.jpg"
/25="F13AS_5323.jpg"
/26="F14AS_5650.jpg"
/27="F15AS_5771.jpg"
/28="F16AS_6001.jpg"
/29="F18AS_6263.jpg"
/30="F19AS_6358.jpg"
/31="F20AS_6500.jpg"
/32="F21AS_6623.jpg"
/33="F22AS_6722.jpg"
/34="F23AS_7248.jpg"
/35="F30AS_8557.jpg"
/36="F31AS_7888.jpg"
/37="F32AS_8075.jpg"
/38="F33AS_8182.jpg"
/39="F34AS_8277.jpg"
/40="F35AS_8470.jpg"
/41="F36AS_8598.jpg"
/42="F37AS_9032.jpg"
/43="F38AS_9388.jpg"
/44="F39AS_9498.jpg"
/45="F40AS_9611.jpg"
/46="M14AS_7973.jpg"
/47="M15AS_8385.jpg"
/48="M16AS_8698.jpg"
</item>

<item words_testMC>
/1="glad"
/2="happy"
/3="joyful"
/4="glad"
/5="happy"
/6="joyful"
/7="glad"
/8="happy"
/9="joyful"
/10="glad"
/11="happy"
/12="joyful"
/13="glad"
/14="happy"
/15="joyful"
/16="glad"
/17="happy"
/18="joyful"
/19="angry"
/20="mad"
/21="upset"
/22="angry"
/23="mad"
/24="upset"
/25="angry"
/26="mad"
/27="upset"
/28="angry"
/29="mad"
/30="upset"
/31="angry"
/32="mad"
/33="upset"
/34="angry"
/35="mad"
/36="upset"
/37="angry"
/38="mad"
/39="upset"
/40="angry"
/41="mad"
/42="upset"
/43="glad"
/44="happy"
/45="joyful"
/46="glad"
/47="happy"
/48="joyful"
</item>

<list wordPositions_testMC>
/ items = (1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2)
/ select = values.selectStim
</list>

<list congruency_testMC>
/ items = (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2)
/ select = values.selectStim
</list>

<item correctButton_testMC>
/1="positiveButton"
/2="positiveButton"
/3="positiveButton"
/4="positiveButton"
/5="positiveButton"
/6="positiveButton"
/7="positiveButton"
/8="positiveButton"
/9="positiveButton"
/10="positiveButton"
/11="positiveButton"
/12="positiveButton"
/13="positiveButton"
/14="positiveButton"
/15="positiveButton"
/16="positiveButton"
/17="positiveButton"
/18="positiveButton"
/19="negativeButton"
/20="negativeButton"
/21="negativeButton"
/22="negativeButton"
/23="negativeButton"
/24="negativeButton"
/25="negativeButton"
/26="negativeButton"
/27="negativeButton"
/28="negativeButton"
/29="negativeButton"
/30="negativeButton"
/31="negativeButton"
/32="negativeButton"
/33="negativeButton"
/34="negativeButton"
/35="negativeButton"
/36="negativeButton"
/37="negativeButton"
/38="negativeButton"
/39="negativeButton"
/40="negativeButton"
/41="negativeButton"
/42="negativeButton"
/43="positiveButton"
/44="positiveButton"
/45="positiveButton"
/46="positiveButton"
/47="positiveButton"
/48="positiveButton"
</item>

****************************
testE

(E = equal number of congruent and incongruent pairings)
****************************

<list testE_itemnumbers>
/items = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)
/ replace = false
/ resetinterval = 0
</list>

<item pics_testE>
/1="F1AS_3411.jpg"
/2="F2AS_3506.jpg"
/3="F3AS_3625.jpg"
/4="F4AS_3715.jpg"
/5="F5AS_3827.jpg"
/6="F6_1_AS_3929.jpg"
/7="F7AS_4050.jpg"
/8="F8AS_4126.jpg"
/9="F9AS_4247.jpg"
/10="F10AS_4451.jpg"
/11="F11AS_4593.jpg"
/12="F12AS_5068.jpg"
/13="M1AS_4345.jpg"
/14="M2AS_4654.jpg"
/15="M3AS_4811.jpg"
/16="M4AS_4958.jpg"
/17="M5AS_5223.jpg"
/18="M6AS_5461.jpg"
/19="M7AS_5550.jpg"
/20="M8AS_5893.jpg"
/21="M9AS_6138.jpg"
/22="M10AS_6840.jpg"
/23="M11AS_6974.jpg"
/24="M12AS_7102.jpg"
/25="F13HS_5255.jpg"
/26="F14HS_5590.jpg"
/27="F15HS_5694.jpg"
/28="F16HS_5924.jpg"
/29="F18HS_6186.jpg"
/30="F19HS_6297.jpg"
/31="F20HS_6413.jpg"
/32="F21HS_6544.jpg"
/33="F22HS_6659.jpg"
/34="F23HS_7148.jpg"
/35="F30HS_8495.jpg"
/36="F31HS_8581.jpg"
/37="F32HS_7996.jpg"
/38="F33HS_8104.jpg"
/39="F34HS_8209.jpg"
/40="F35HS_8418.jpg"
/41="F36HS_8502.jpg"
/42="F37HS_8954.jpg"
/43="F38HS_9328.jpg"
/44="F39HS_9426.jpg"
/45="F40HS_9533.jpg"
/46="M14HS_7912.jpg"
/47="M15HS_8316.jpg"
/48="M16HS_8633.jpg"
</item>

<item words_testE>
/1="joyful"
/2="glad"
/3="happy"
/4="joyful"
/5="glad"
/6="happy"
/7="joyful"
/8="glad"
/9="happy"
/10="joyful"
/11="glad"
/12="happy"
/13="upset"
/14="angry"
/15="mad"
/16="upset"
/17="angry"
/18="mad"
/19="upset"
/20="angry"
/21="mad"
/22="upset"
/23="angry"
/24="mad"
/25="joyful"
/26="glad"
/27="happy"
/28="joyful"
/29="glad"
/30="happy"
/31="joyful"
/32="glad"
/33="happy"
/34="joyful"
/35="glad"
/36="happy"
/37="upset"
/38="angry"
/39="mad"
/40="upset"
/41="angry"
/42="mad"
/43="upset"
/44="angry"
/45="mad"
/46="upset"
/47="angry"
/48="mad"
</item>

<list wordPositions_testE>
/ items = (2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1)
/ select = values.selectStim
</list>

<list congruency_testE>
/ items = (2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2)
/ select = values.selectStim
</list>

<item correctButton_testE>
/1="positiveButton"
/2="positiveButton"
/3="positiveButton"
/4="positiveButton"
/5="positiveButton"
/6="positiveButton"
/7="positiveButton"
/8="positiveButton"
/9="positiveButton"
/10="positiveButton"
/11="positiveButton"
/12="positiveButton"
/13="negativeButton"
/14="negativeButton"
/15="negativeButton"
/16="negativeButton"
/17="negativeButton"
/18="negativeButton"
/19="negativeButton"
/20="negativeButton"
/21="negativeButton"
/22="negativeButton"
/23="negativeButton"
/24="negativeButton"
/25="positiveButton"
/26="positiveButton"
/27="positiveButton"
/28="positiveButton"
/29="positiveButton"
/30="positiveButton"
/31="positiveButton"
/32="positiveButton"
/33="positiveButton"
/34="positiveButton"
/35="positiveButton"
/36="positiveButton"
/37="negativeButton"
/38="negativeButton"
/39="negativeButton"
/40="negativeButton"
/41="negativeButton"
/42="negativeButton"
/43="negativeButton"
/44="negativeButton"
/45="negativeButton"
/46="negativeButton"
/47="negativeButton"
/48="negativeButton"
</item>

**************************************************************************************************************
				!!!REMAINING CODE: Customize after careful consideration only!!!
**************************************************************************************************************


**************************************************************************************************************
**************************************************************************************************************
	DEFAULTS
**************************************************************************************************************
**************************************************************************************************************
script requires Inquisit 6.5.2.0 or higher

<defaults>
/canvasaspectratio = (4,3)
/minimumversion = "6.5.2.0"
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/txbgcolor = transparent
/ txcolor = white
/ screencolor = black
/ inputdevice = keyboard
</defaults>

**************************************************************************************************************
**************************************************************************************************************
	DATA
**************************************************************************************************************
**************************************************************************************************************

Note: data file explanations under User Manual Information at the top

To change from one data file per participant to one data file for all participants, set
/separatefiles = false

***********************
raw data file
***********************
<data>
/ separatefiles = true
/ columns = (build, computer.platform, date, time, subject, group, session, 
blockcode, blocknum, trialcode, trialnum,values.keyAssignment,
values.wordposition, values.word_y, values.congruence, values.selectStim,
stimulusitem, stimulusitem, stimulusitem,
values.correctButton, response, correct, latency, list.accuracy.mean)
</data>

***********************
summary data file
***********************
<summarydata>
/ columns = (inquisit.version, computer.platform, script.startdate, script.starttime, script.subjectid, script.groupid, script.sessionid, 
script.elapsedtime, script.completed,
values.keyAssignment,
values.ACC_practice1, 
values.practice1Runs, 
values.ACC_practice2, 
values.practice2Runs,
expressions.ACC_all, 
expressions.ACC_moreCongruent, 
expressions.ACC_moreCongruentCongruent, 
expressions.ACC_moreCongruentIncongruent, 
expressions.ACC_equal, 
expressions.ACC_equalCongruent, 
expressions.ACC_equalIncongruent, 
expressions.ACC_congruent, 
expressions.ACC_incongruent, 
expressions.meanRT_all,
expressions.meanRT_moreCongruent,
expressions.meanRT_moreCongruentCongruent,
expressions.meanRT_moreCongruentIncongruent,
expressions.meanRT_equal,
expressions.meanRT_equalCongruent,
expressions.meanRT_equalIncongruent,
expressions.meanRT_congruent,
expressions.meanRT_incongruent
)
/ separatefiles = true
</summarydata>


**************************************************************************************************************
**************************************************************************************************************
	VALUES: automatically updated
**************************************************************************************************************
**************************************************************************************************************
                                    
/countTestBlocks:		counts number of test blocks
/selectWord:			stores the itemnumber of the currently presented word
/selectImage:			stores the itemnumber of the currently presented image
/wordposition:			1 = word appears on top; 2 = word appears on bottom
/word_y:				stores the vertical coordinate of the current word
/congruence:			0 = neutral; 1 = incongruent
/practice1Runs:			counts number of practice1 runs
/practice2Runs:			counts number of practice2 runs
/selectFeedback:		controls the selection of the feedback text to be presented
/skipReadyTrial:		0 = run ready trial; 1 = skip ready trial

<values>
/countTestBlocks = 0
/selectWord = 1
/selectImage = 1
/selectStim = 1
/wordposition = 1
/correctButton = ""
/word_y = 50%
/congruence = 0
/practice1Runs = 0
/practice2Runs = 0
/selectFeedback = 0
/skipReadyTrial = 0
/getReady = 1
/keyAssignment = "leftnegative"

/goodkey = parameters.rightresponsekey
/badkey = parameters.leftresponsekey
</values>


/ACC_practice1:			stores the proportion correct of the current practice run

<values>
/ACC_practice1 = 0
/ACC_practice2 = 0
</values>

**************************************************************************************************************
**************************************************************************************************************
	EXPRESSIONS
**************************************************************************************************************
**************************************************************************************************************

/shadowSize:						size of shadow text

/ACC_all:						proportion correct overall (across all test trials)
/meanRT_all: 					mean correct latency (in ms) overall

/ACC_moreCongruent:					proportion correct in "more congruent pairings" block
/ACC_equal:							proportion correct in "equal numbers of congruent/incongruent pairings" block
/ACC_congruent:						proportion correct in "congruent" pairings trials (across test blocks)
/ACC_incongruent:					proportion correct in "incongruent" pairings trials (across test blocks)

/meanRT_moreCongruent:				mean correct latency (in ms) in "more congruent pairings" block
/meanRT_equal:						mean correct latency (in ms) in "equal numbers of congruent/incongruent pairings" block
/meanRT_congruent:					mean correct latency (in ms) in "congruent" pairings trials (across test blocks)
/meanRT_incongruent:				mean correct latency (in ms) in "incongruent" pairings trials (across test blocks)

<expressions>
/shadowSize = parameters.wordSize * 1.01

/ACC_all = list.accuracy.mean
/ACC_moreCongruent = list.accuracyMC.mean
/ACC_moreCongruentCongruent = list.accuracyMCCongruent.mean
/ACC_moreCongruentIncongruent = list.accuracyMCIncongruent.mean
/ACC_equal = list.accuracyE.mean
/ACC_equalCongruent = list.accuracyECongruent.mean
/ACC_equalIncongruent = list.accuracyEIncongruent.mean
/ACC_congruent = list.accuracyCongruent.mean
/ACC_incongruent = list.accuracyIncongruent.mean

/meanRT_all = list.latencies.mean
/meanRT_moreCongruent = list.latenciesMC.mean
/meanRT_moreCongruentCongruent = list.latenciesMCCongruent.mean
/meanRT_moreCongruentIncongruent = list.latenciesMCIncongruent.mean
/meanRT_equal = list.latenciesE.mean
/meanRT_equalCongruent = list.latenciesECongruent.mean
/meanRT_equalIncongruent = list.latenciesEIncongruent.mean
/meanRT_congruent = list.latenciesCongruent.mean
/meanRT_incongruent = list.latenciesIncongruent.mean
</expressions>

**************************************************************************************************************
**************************************************************************************************************
	INSTRUCTIONS
**************************************************************************************************************
**************************************************************************************************************

<text intro>
/ items = instructions
/ select = sequence
/ position = (50%, 50%)
/ fontstyle = ("Arial", 4%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (90%, 80%)
</text>

<text newBlock>
/ items = instructions
/ select = 5
/ position = (50%, 50%)
/ fontstyle = ("Arial", 6%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (90%, 80%)
</text>

<text break>
/ items = instructions
/ select = 6
/ position = (50%, 50%)
/ fontstyle = ("Arial", 8%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (90%, 80%)
</text>

<text end>
/ items = instructions
/ select = 7
/ position = (50%, 50%)
/ fontstyle = ("Arial", 8%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (90%, 80%)
</text>

<text continueButton_intro>
/ items = continueButtons
/ select = text.intro.currentitemnumber
/ position = (50%, 90%)
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (45%, 5%)
/ txbgcolor = blue
</text>

<text continueButton_testblock>
/ items = continueButtons
/ select = text.newBlock.currentitemnumber
/ position = (50%, 90%)
/ fontstyle = ("Arial", 3.5%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (45%, 5%)
/ txbgcolor = blue
</text>

<text continueButton_Pnd>
/ items = continueButtons
/ select = text.end.currentitemnumber
/ position = (50%, 90%)
/ fontstyle = ("Arial", 3.5%, true, false, false, false, 5, 1)
/ vjustify = center
/ hjustify = center
/ size = (45%, 5%)
/ txbgcolor = red
</text>



***********************
Instruction Trials
***********************

<trial intro>
/ inputdevice = keyboard
/ stimulusframes = [1 = intro, continueButton_intro]
/ validresponse = (" ")
/ recorddata = false
/ branch = [
	trial.intro2;
]
</trial>

<trial intro2>
/ inputdevice = keyboard
/ stimulusframes = [1 = intro,positiveButton_instruct, negativeButton_instruct, positiveButton_instruct, positiveEmotionExamples, negativeEmotionExamples, 
continueButton_intro]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial practice1Start>
/ inputdevice = keyboard
/ stimulusframes = [1 = intro, continueButton_intro]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial practice2Start>
/ inputdevice = keyboard
/ stimulusframes = [1 = intro, continueButton_intro]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial practiceEnd>
/ inputdevice = keyboard
/ stimulusframes = [1 = intro, continueButton_intro]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial nextBlock>
/ skip = [
	values.countTestBlocks > 1;
]
/ stimulusframes = [1 = newBlock, continueButton_testBlock]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial finish>
/ inputdevice = keyboard
/ skip = [
	values.countTestBlocks == 1;
]
/ stimulusframes = [1 = clearscreen, end, exit]
/ validresponse = (" ")
/ recorddata = false
</trial>

<trial break>
/ skip = [
	values.countTestBlocks > 1;
]
/ ontrialbegin = [
	text.continueButton_Pnd.textbgcolor = blue;
]
/ stimulusframes = [1 = clearscreen, break, continueButton_Pnd]
/ validresponse = (" ")
/ recorddata = false
/ ontrialend = [
	text.continueButton_Pnd.textbgcolor = red;	
]
</trial>

*************************************
General Helper Instruction Trials/Blocks
*************************************

<trial getReady1>
/ stimulusframes = [1 = clearscreen, getReadyMessage, goodKeyReminder, badKeyReminder]
/ trialduration = 3000
/ validresponse = (parameters.leftresponsekey, parameters.rightresponsekey)
/ beginresponsetime = 3000
/ errormessage = false
/ recorddata = false
</trial>

**************************************************************************************************************
**************************************************************************************************************
	STIMULI
**************************************************************************************************************
**************************************************************************************************************

<text Word_practice1>
/ items = item.words_practice1
/ select = values.selectStim
/ vposition = 50%
/ hposition = 50%
/ fontstyle = ("Arial", parameters.wordSize, false, false, false, false, 5, 1)
/ size = (40%, parameters.wordSize*1.5)
/ vjustify = center
/ hjustify = center
/ txcolor = cyan
/ erase = false
</text>

<text Word_practice2>
/ items = item.words_practice2
/ select = values.selectStim
/ vposition = values.word_y
/ hposition = 50%
/ fontstyle = ("Arial", parameters.wordSize, false, false, false, false, 5, 1)
/ size = (40%, parameters.wordSize*1.5)
/ vjustify = center
/ hjustify = center
/ txcolor = cyan
/ erase = false
</text>

<text Wordshadow_practice2>
/ items = item.words_practice2
/ select = values.selectStim
/ vposition = values.word_y
/ hposition = 50%
/ fontstyle = ("Arial", expressions.shadowSize, false, false, false, false, 5, 1)
/ size = (40%, parameters.wordSize*1.5)
/ vjustify = center
/ hjustify = center
/ txcolor = black
/ erase = false
</text>

<picture pic_practice2>
/items = pics_practice2
/ select = values.selectStim
/ position = (50%, 50%)
/ size = (parameters.picsize, parameters.picSize)
/ erase = false
</picture>

<text Word_testMC>
/ items = item.words_testMC
/ select = values.selectStim
/ vposition = values.word_y
/ hposition = 50%
/ fontstyle = ("Arial", parameters.wordSize, false, false, false, false, 5, 1)
/ size = (40%, parameters.wordSize*1.5)
/ vjustify = center
/ hjustify = center
/ txcolor = cyan
/ erase = false
</text>

<text Wordshadow_testMC>
/ items = item.words_testMC
/ select = values.selectStim
/ vposition = values.word_y
/ hposition = 50%
/ fontstyle = ("Arial", expressions.shadowSize, false, false, false, false, 5, 1)
/ size = (40%, parameters.wordSize*1.5)
/ vjustify = center
/ hjustify = center
/ txcolor = black
/ erase = false
</text>

<picture pic_testMC>
/items = pics_testMC
/ select = values.selectStim
/ position = (50%, 50%)
/ size = (parameters.picsize, parameters.picSize)
/ erase = false
</picture>

<text Word_testE>
/ items = item.words_testE
/ select = values.selectStim
/ vposition = values.word_y
/ hposition = 50%
/ fontstyle = ("Arial", parameters.wordSize, false, false, false, false, 5, 1)
/ size = (40%, parameters.wordSize*1.5)
/ vjustify = center
/ hjustify = center
/ txcolor = cyan
/ erase = false
</text>

<text Wordshadow_testE>
/ items = item.words_testE
/ select = values.selectStim
/ vposition = values.word_y
/ hposition = 50%
/ fontstyle = ("Arial", expressions.shadowSize, false, false, false, false, 5, 1)
/ size = (40%, parameters.wordSize*1.5)
/ vjustify = center
/ hjustify = center
/ txcolor = black
/ erase = false
</text>

<picture pic_testE>
/items = pics_testE
/ select = values.selectStim
/ position = (50%, 50%)
/ size = (parameters.picsize, parameters.picSize)
/ erase = false
</picture>

<text feedback>
/ items = feedback
/ select = values.selectFeedback
/ txcolor = yellow
/ fontstyle = ("Arial", 7%, true, false, false, false, 5, 1)
/ position = (50%, 30%)
/ size = (80%, 10%)
/ vjustify = center
/ hjustify = center
/ erase = false
</text>

<shape getReadyEraser>
/ shape = rectangle
/ size = (80%, 40%)
/ position = (50%, 30%)
/ erase = false
/ color = black
</shape>

**************************************************************************************************************
**************************************************************************************************************
	LISTS	
**************************************************************************************************************
**************************************************************************************************************

*************************************************
Data Lists: used for descriptive statistics
store correct latencies/accuracy data
fill up during runtime
*************************************************

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracy>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latencies>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyMC>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyMCCongruent>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyMCIncongruent>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesMC>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesMCCongruent>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesMCIncongruent>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyE>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyECongruent>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyEIncongruent>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesE>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesECongruent>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesEIncongruent>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyCongruent>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesCongruent>
</list>

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list accuracyIncongruent>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list latenciesIncongruent>
</list>


**************************************************************************************************************
**************************************************************************************************************
	TRIALS : practice1
**************************************************************************************************************
**************************************************************************************************************

<trial practice1>
/ inputdevice = keyboard
/ ontrialbegin = [
	values.selectStim = list.practice1_itemnumbers.nextvalue;
	values.correctButton = item.correctButton_practice1.item(values.selectStim);
]
/ stimulusframes = [1 = clearscreen, Word_practice1, goodKeyReminder, badKeyReminder]
/ validresponse = (parameters.leftresponsekey, parameters.rightresponsekey)
/ iscorrectresponse = [
	if (values.correctButton == "positiveButton"){
		if (trial.practice1.responsetext == values.goodkey){
			return true;
		} else {
			return false;
		};
	} else {
		if (trial.practice1.responsetext == values.badkey){
			return true;
		} else {
			return false;
		};		
	};
]
/ beginresponsetime = 0
/ responseinterrupt = trial
/ ontrialend = [
	list.accuracy.appendItem(trial.practice1.correct);
	values.ACC_practice1 = list.accuracy.mean;	

	if (trial.practice1.correct){
		values.selectFeedback = 1;
		text.feedback.textcolor = yellow;
	} else if (trial.practice1.response != 0){
		values.selectFeedback = 2;
		text.feedback.textcolor = red;
	} else {
		values.selectFeedback = 3;
		text.feedback.textcolor = blue;
	};	
]
/ trialduration = parameters.wordPresentationTime_practice
/ branch = [
	return trial.feedback;
]
</trial>


**************************************************************************************************************
**************************************************************************************************************
	TRIALS : practice2
**************************************************************************************************************
**************************************************************************************************************

<trial practice2>
/ inputdevice = keyboard
/ ontrialbegin = [
	values.selectStim = list.practice2_itemnumbers.nextvalue;
	values.wordposition = list.wordPositions_practice2.nextvalue;
	values.congruence = list.congruency_practice2.nextvalue;
	values.correctButton = item.correctButton_practice2.item(values.selectStim);
	
	if (values.wordposition == 1){
		values.word_y = parameters.top_y;
	} else {
		values.word_y = parameters.bottom_y;
	};
	
]
/ stimulusframes = [1 = clearscreen, pic_practice2, Wordshadow_practice2,Word_practice2, goodKeyReminder, badKeyReminder]
/ validresponse = (parameters.leftresponsekey, parameters.rightresponsekey)
/ iscorrectresponse = [
	if (values.correctButton == "positiveButton"){
		if (trial.practice2.responsetext == values.goodkey){
			return true;
		} else {
			return false;
		};
	} else {
		if (trial.practice2.responsetext == values.badkey){
			return true;
		} else {
			return false;
		};		
	};
]
/ beginresponsetime = 0
/ responseinterrupt = trial
/ ontrialend = [
	
	list.accuracy.appendItem(trial.practice2.correct);
	values.ACC_practice2 = list.accuracy.mean;	

	if (trial.practice2.correct){
		values.selectFeedback = 1;
		text.feedback.textcolor = yellow;
	} else if (trial.practice2.response != 0){
		values.selectFeedback = 2;
		text.feedback.textcolor = red;
	} else {
		values.selectFeedback = 3;
		text.feedback.textcolor = blue;
	};
	
]
/ trialduration = parameters.wordPresentationTime_practice
/ branch = [
	return trial.feedback;
]
</trial>

**************************************************************************************************************
**************************************************************************************************************
	TRIALS: test
**************************************************************************************************************
**************************************************************************************************************

=> MC: more congruent pairs
<trial testMC>
/ inputdevice = keyboard
/ ontrialbegin = [
	values.selectStim = list.testMC_itemnumbers.nextvalue;
	values.wordposition = list.wordPositions_testMC.nextvalue;
	values.congruence = list.congruency_testMC.nextvalue;
	values.correctButton = item.correctButton_testMC.item(values.selectStim);
	
	if (values.wordposition == 1){
		values.word_y = parameters.top_y;
	} else {
		values.word_y = parameters.bottom_y;
	};
	
]
/ stimulusframes = [1 = clearscreen, pic_testMC, Wordshadow_testMC, Word_testMC, goodKeyReminder, badKeyReminder]
/ validresponse = (parameters.leftresponsekey, parameters.rightresponsekey)
/ iscorrectresponse = [
	if (values.correctButton == "positiveButton"){
		if (trial.testMC.responsetext == values.goodkey){
			return true;
		} else {
			return false;
		};
	} else {
		if (trial.testMC.responsetext == values.badkey){
			return true;
		} else {
			return false;
		};		
	};
]
/ beginresponsetime = 0
/ responseinterrupt = trial
/ ontrialend = [
	list.accuracy.appendItem(trial.testMC.correct);
	list.accuracyMC.appendItem(trial.testMC.correct);
	if (values.congruence == 1){
		list.accuracyCongruent.appendItem(trial.testMC.correct);
		list.accuracyMCCongruent.appenditem(trial.testMC.correct);
	} else {
		list.accuracyIncongruent.appendItem(trial.testMC.correct);
		list.accuracyMCIncongruent.appenditem(trial.testMC.correct);
	};
	
	if (trial.testMC.correct){
		list.latencies.appendItem(trial.testMC.latency);
		list.latenciesMC.appendItem(trial.testMC.latency);
		
		if (values.congruence == 1){
			list.latenciesCongruent.appendItem(trial.testMC.latency);
			list.latenciesMCCongruent.appendItem(trial.testMC.latency);
		} else {
			list.latenciesIncongruent.appendItem(trial.testMC.latency);
			list.latenciesMCIncongruent.appendItem(trial.testMC.latency);
		};
	};
]
/ trialduration = parameters.wordPresentationTime_test
/ branch = [
	return trial.ITI;
]
</trial>

=> E: equal number congruent/incongruent pairs
<trial testE>
/ inputdevice = keyboard
/ ontrialbegin = [
	values.selectStim = list.testE_itemnumbers.nextvalue;
	values.wordposition = list.wordPositions_testE.nextvalue;
	values.congruence = list.congruency_testE.nextvalue;
	values.correctButton = item.correctButton_testE.item(values.selectStim);
	
	if (values.wordposition == 1){
		values.word_y = parameters.top_y;
	} else {
		values.word_y = parameters.bottom_y;
	};
	
]
/ stimulusframes = [1 = clearscreen, pic_testE, Wordshadow_testE, Word_testE, goodKeyReminder, badKeyReminder]
/ validresponse = (parameters.leftresponsekey, parameters.rightresponsekey)
/ iscorrectresponse = [
	if (values.correctButton == "positiveButton"){
		if (trial.testE.responsetext == values.goodkey){
			return true;
		} else {
			return false;
		};
	} else {
		if (trial.testE.responsetext == values.badkey){
			return true;
		} else {
			return false;
		};		
	};
]
/ beginresponsetime = 0
/ responseinterrupt = trial
/ ontrialend = [
	list.accuracy.appendItem(trial.testE.correct);
	list.accuracyE.appendItem(trial.testE.correct);
	if (values.congruence == 1){
		list.accuracyCongruent.appendItem(trial.testE.correct);
		list.accuracyECongruent.appenditem(trial.testE.correct);
	} else {
		list.accuracyIncongruent.appendItem(trial.testE.correct);
		list.accuracyEIncongruent.appenditem(trial.testE.correct);
	};
	
	if (trial.testE.correct){
		list.latencies.appendItem(trial.testE.latency);
		list.latenciesE.appendItem(trial.testE.latency);
		
		if (values.congruence == 1){
			list.latenciesCongruent.appendItem(trial.testE.latency);
			list.latenciesECongruent.appenditem(trial.testE.latency);
		} else {
			list.latenciesIncongruent.appendItem(trial.testE.latency);
			list.latenciesEIncongruent.appenditem(trial.testE.latency);
		};
		
	};
]
/ trialduration = parameters.wordPresentationTime_test
/ branch = [
	return trial.ITI;
]
</trial>

<trial repeatPractice>
/ inputdevice = keyboard
/ stimulusframes = [1 = repeatPractice, continueButton_intro]
/ validresponse = (" ")
</trial>



**************************************************************************************************************
**************************************************************************************************************
	TRIALS : helper trials
**************************************************************************************************************
**************************************************************************************************************

<trial feedback>
/ stimulusframes = [1 = clearscreen, feedback]

//touchscreens: present inactive response buttons
/ validresponse = (parameters.leftresponsekey, parameters.rightresponsekey)
/ isvalidresponse = [
	return(false);
]

/ recorddata = false
/ trialduration = parameters.feedbackDuration
</trial>

<trial ITI>
/ stimulusframes = [1 = clearscreen]

//touchscreens: present inactive response buttons
/ validresponse = (parameters.leftresponsekey, parameters.rightresponsekey)
/ isvalidresponse = [
	return(false);
]

/ recorddata = false
/ trialduration = parameters.ITI
</trial>

**************************************************************************************************************
**************************************************************************************************************
	BLOCKS
**************************************************************************************************************
**************************************************************************************************************

<block intro>
/ trials = [1 = intro]
</block>

<block practice1Intro>
/ trials = [1 = practice1Start]
</block>

<block practice1>
/ onblockbegin = [
	list.accuracy.reset();
	list.latencies.reset();
	values.practice1Runs += 1;
]
/ trials = [1 = getReady1; 2-9 = practice1]
/ branch = [
	if (list.accuracy.mean < 0.75 && !monkey.monkeymode){
		return block.repeatPractice;
	};
]
</block>


<block practice2Intro>
/ trials = [1 = practice2Start]
/ onblockbegin = [
	values.skipReadyTrial = 0;
]
</block>

<block practice2>
/ onblockbegin = [
	list.accuracy.reset();
	list.latencies.reset();
	values.practice2Runs += 1;
]
/ trials = [1 = getReady1; 2-5 = practice2]
/ onblockend = [
	values.skipReadyTrial = 1;
]
/ branch = [
	if (list.accuracy.mean < 1 && !monkey.monkeymode){
		return block.repeatPractice;
	};
]
</block>


<block repeatPractice>
/ trials = [1=repeatPractice]
/ branch = [
	if(values.practice2Runs > 0) {
		return block.practice2;
	} else {
		return block.practice1;
	};
]
</block>


<block testStart>
/ trials = [1 = practiceEnd]
/ onblockbegin = [
	list.accuracy.reset();
	list.latencies.reset();
	values.skipReadyTrial = 0;
]
</block>

<block testMC>
/ onblockbegin = [
	values.countTestBlocks += 1;
]
/ trials = [
	1 = getReady1; 
	2-49 = testMC; 
	50 = break; 
	51 = finish;
]
</block>


<block testE>
/ onblockbegin = [
	values.countTestBlocks += 1;
]
/ trials = [
	1 = getReady1; 
	2-49 = testE; 
	50 = break; 
	51 = finish;
]
</block>


**************************************************************************************************************
**************************************************************************************************************
	EXPERIMENT 
**************************************************************************************************************
**************************************************************************************************************

<expt>
/ onexptbegin = [
	if (computer.touch && !computer.haskeyboard){
		text.continueButton_Pnd.skip = true;
		text.continueButton_intro.skip = true;
		text.continueButton_testblock.skip = true;
	};
]
/ blocks = [
	1 = intro;
	//2 = practice1Intro;
	//3 = practice1;
	//4 = practice2Intro;
	//5 = practice2;
	//6 = testStart;
	//7 = testMC;
	2 = testE;
]
</expt>

<monkey>
/ latencydistribution = normal(50, 20)
</monkey>

**************************************************************************************************************
												End of File
**************************************************************************************************************